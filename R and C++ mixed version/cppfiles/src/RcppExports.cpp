// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_mcmc_cpp
Rcpp::List run_mcmc_cpp(int N_iter, int n_ranks, int N_parm, int nline_data, const Rcpp::NumericMatrix& data_NlineNdim, Rcpp::NumericMatrix sigma_RanksParm, Rcpp::NumericMatrix transit_BetaParm, Rcpp::NumericVector logpost_all_ranks, Rcpp::IntegerVector i_accumul, Rcpp::IntegerVector i_accumul_accept, int n_iter_a_stack_base, int n_iter_a_batch_base, int n_iter_a_batch_rand, int Swapmode, int i_save_begin, int N_stoptune, double ar_ok_upper, double ar_ok_lower, const Rcpp::NumericVector& sigma_parm_min, const Rcpp::NumericVector& sigma_parm_max, double sigma_jumpin_ratio, double sigma_scale_half_ratio, int n_iter_in_tune, double ar_best, double ar_accept_diff, double init_gp_ratio, const Rcpp::NumericVector& para_min, const Rcpp::NumericVector& para_max, const Rcpp::NumericVector& Beta_Values, std::string results_dir);
RcppExport SEXP _cppfiles_run_mcmc_cpp(SEXP N_iterSEXP, SEXP n_ranksSEXP, SEXP N_parmSEXP, SEXP nline_dataSEXP, SEXP data_NlineNdimSEXP, SEXP sigma_RanksParmSEXP, SEXP transit_BetaParmSEXP, SEXP logpost_all_ranksSEXP, SEXP i_accumulSEXP, SEXP i_accumul_acceptSEXP, SEXP n_iter_a_stack_baseSEXP, SEXP n_iter_a_batch_baseSEXP, SEXP n_iter_a_batch_randSEXP, SEXP SwapmodeSEXP, SEXP i_save_beginSEXP, SEXP N_stoptuneSEXP, SEXP ar_ok_upperSEXP, SEXP ar_ok_lowerSEXP, SEXP sigma_parm_minSEXP, SEXP sigma_parm_maxSEXP, SEXP sigma_jumpin_ratioSEXP, SEXP sigma_scale_half_ratioSEXP, SEXP n_iter_in_tuneSEXP, SEXP ar_bestSEXP, SEXP ar_accept_diffSEXP, SEXP init_gp_ratioSEXP, SEXP para_minSEXP, SEXP para_maxSEXP, SEXP Beta_ValuesSEXP, SEXP results_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_iter(N_iterSEXP);
    Rcpp::traits::input_parameter< int >::type n_ranks(n_ranksSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    Rcpp::traits::input_parameter< int >::type nline_data(nline_dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type data_NlineNdim(data_NlineNdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type sigma_RanksParm(sigma_RanksParmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type transit_BetaParm(transit_BetaParmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type logpost_all_ranks(logpost_all_ranksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type i_accumul(i_accumulSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type i_accumul_accept(i_accumul_acceptSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_stack_base(n_iter_a_stack_baseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_batch_base(n_iter_a_batch_baseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_batch_rand(n_iter_a_batch_randSEXP);
    Rcpp::traits::input_parameter< int >::type Swapmode(SwapmodeSEXP);
    Rcpp::traits::input_parameter< int >::type i_save_begin(i_save_beginSEXP);
    Rcpp::traits::input_parameter< int >::type N_stoptune(N_stoptuneSEXP);
    Rcpp::traits::input_parameter< double >::type ar_ok_upper(ar_ok_upperSEXP);
    Rcpp::traits::input_parameter< double >::type ar_ok_lower(ar_ok_lowerSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sigma_parm_min(sigma_parm_minSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sigma_parm_max(sigma_parm_maxSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_jumpin_ratio(sigma_jumpin_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_scale_half_ratio(sigma_scale_half_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_in_tune(n_iter_in_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type ar_best(ar_bestSEXP);
    Rcpp::traits::input_parameter< double >::type ar_accept_diff(ar_accept_diffSEXP);
    Rcpp::traits::input_parameter< double >::type init_gp_ratio(init_gp_ratioSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type para_min(para_minSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type para_max(para_maxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Beta_Values(Beta_ValuesSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_cpp(N_iter, n_ranks, N_parm, nline_data, data_NlineNdim, sigma_RanksParm, transit_BetaParm, logpost_all_ranks, i_accumul, i_accumul_accept, n_iter_a_stack_base, n_iter_a_batch_base, n_iter_a_batch_rand, Swapmode, i_save_begin, N_stoptune, ar_ok_upper, ar_ok_lower, sigma_parm_min, sigma_parm_max, sigma_jumpin_ratio, sigma_scale_half_ratio, n_iter_in_tune, ar_best, ar_accept_diff, init_gp_ratio, para_min, para_max, Beta_Values, results_dir));
    return rcpp_result_gen;
END_RCPP
}
// r8_normal_01
double r8_normal_01();
RcppExport SEXP _cppfiles_r8_normal_01() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(r8_normal_01());
    return rcpp_result_gen;
END_RCPP
}
// r8_normal_ab
double r8_normal_ab(double a, double b);
RcppExport SEXP _cppfiles_r8_normal_ab(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(r8_normal_ab(a, b));
    return rcpp_result_gen;
END_RCPP
}
// r8_logunif_ab
double r8_logunif_ab(double a, double b);
RcppExport SEXP _cppfiles_r8_logunif_ab(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(r8_logunif_ab(a, b));
    return rcpp_result_gen;
END_RCPP
}
// r8_unif_ab
double r8_unif_ab(double a, double b);
RcppExport SEXP _cppfiles_r8_unif_ab(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(r8_unif_ab(a, b));
    return rcpp_result_gen;
END_RCPP
}
// i4_unif_ab
int i4_unif_ab(int a, int b);
RcppExport SEXP _cppfiles_i4_unif_ab(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(i4_unif_ab(a, b));
    return rcpp_result_gen;
END_RCPP
}
// i4_unif_0a
int i4_unif_0a(int a);
RcppExport SEXP _cppfiles_i4_unif_0a(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(i4_unif_0a(a));
    return rcpp_result_gen;
END_RCPP
}
// normal_pdf
double normal_pdf(double x, double mean, double sd);
RcppExport SEXP _cppfiles_normal_pdf(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// save_first_chain_cpp
int save_first_chain_cpp(NumericVector chain_parm, std::string path, int i_rank, double logpost_first, int N_parm, std::string FoutPre, std::string FoutSuf);
RcppExport SEXP _cppfiles_save_first_chain_cpp(SEXP chain_parmSEXP, SEXP pathSEXP, SEXP i_rankSEXP, SEXP logpost_firstSEXP, SEXP N_parmSEXP, SEXP FoutPreSEXP, SEXP FoutSufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type chain_parm(chain_parmSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< double >::type logpost_first(logpost_firstSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutPre(FoutPreSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutSuf(FoutSufSEXP);
    rcpp_result_gen = Rcpp::wrap(save_first_chain_cpp(chain_parm, path, i_rank, logpost_first, N_parm, FoutPre, FoutSuf));
    return rcpp_result_gen;
END_RCPP
}
// save_init_parm_cpp
int save_init_parm_cpp(NumericMatrix transit_BetaParm, std::string path, int n_ranks, int N_parm);
RcppExport SEXP _cppfiles_save_init_parm_cpp(SEXP transit_BetaParmSEXP, SEXP pathSEXP, SEXP n_ranksSEXP, SEXP N_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type transit_BetaParm(transit_BetaParmSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type n_ranks(n_ranksSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(save_init_parm_cpp(transit_BetaParm, path, n_ranks, N_parm));
    return rcpp_result_gen;
END_RCPP
}
// save_the_seed_cpp
int save_the_seed_cpp(int seed, std::string path, int i_rank);
RcppExport SEXP _cppfiles_save_the_seed_cpp(SEXP seedSEXP, SEXP pathSEXP, SEXP i_rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    rcpp_result_gen = Rcpp::wrap(save_the_seed_cpp(seed, path, i_rank));
    return rcpp_result_gen;
END_RCPP
}
// save_sigma_gauss_prop_cpp
int save_sigma_gauss_prop_cpp(NumericVector ptr_sigma_prop, int i_rank, std::string results_dir, int N_parm);
RcppExport SEXP _cppfiles_save_sigma_gauss_prop_cpp(SEXP ptr_sigma_propSEXP, SEXP i_rankSEXP, SEXP results_dirSEXP, SEXP N_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ptr_sigma_prop(ptr_sigma_propSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(save_sigma_gauss_prop_cpp(ptr_sigma_prop, i_rank, results_dir, N_parm));
    return rcpp_result_gen;
END_RCPP
}
// save_ar_stack_cpp
int save_ar_stack_cpp(int i_next_stack, int n_iter_a_stack, NumericVector accept_rate_a_stack, int n_ranks, std::string results_dir);
RcppExport SEXP _cppfiles_save_ar_stack_cpp(SEXP i_next_stackSEXP, SEXP n_iter_a_stackSEXP, SEXP accept_rate_a_stackSEXP, SEXP n_ranksSEXP, SEXP results_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i_next_stack(i_next_stackSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_stack(n_iter_a_stackSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type accept_rate_a_stack(accept_rate_a_stackSEXP);
    Rcpp::traits::input_parameter< int >::type n_ranks(n_ranksSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(save_ar_stack_cpp(i_next_stack, n_iter_a_stack, accept_rate_a_stack, n_ranks, results_dir));
    return rcpp_result_gen;
END_RCPP
}
// save_the_batch_cpp
int save_the_batch_cpp(const std::vector<std::vector<double>>& chain_IterParm_cpp, int n_iter_a_batch, std::string path, int i_rank, const std::vector<double>& logpost, const std::vector<int>& accumul, const std::vector<int>& accumul_accept, int N_parm, std::string FoutPre, std::string FoutSuf);
RcppExport SEXP _cppfiles_save_the_batch_cpp(SEXP chain_IterParm_cppSEXP, SEXP n_iter_a_batchSEXP, SEXP pathSEXP, SEXP i_rankSEXP, SEXP logpostSEXP, SEXP accumulSEXP, SEXP accumul_acceptSEXP, SEXP N_parmSEXP, SEXP FoutPreSEXP, SEXP FoutSufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type chain_IterParm_cpp(chain_IterParm_cppSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_batch(n_iter_a_batchSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type logpost(logpostSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type accumul(accumulSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type accumul_accept(accumul_acceptSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutPre(FoutPreSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutSuf(FoutSufSEXP);
    rcpp_result_gen = Rcpp::wrap(save_the_batch_cpp(chain_IterParm_cpp, n_iter_a_batch, path, i_rank, logpost, accumul, accumul_accept, N_parm, FoutPre, FoutSuf));
    return rcpp_result_gen;
END_RCPP
}
// save_log_posterior_cpp
int save_log_posterior_cpp(const std::vector<double>& one_chain_new_cpp, double logll_temper_new, double logprior_new, std::string path, int i_rank, int N_parm, std::string FoutPre, std::string FoutSuf);
RcppExport SEXP _cppfiles_save_log_posterior_cpp(SEXP one_chain_new_cppSEXP, SEXP logll_temper_newSEXP, SEXP logprior_newSEXP, SEXP pathSEXP, SEXP i_rankSEXP, SEXP N_parmSEXP, SEXP FoutPreSEXP, SEXP FoutSufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type one_chain_new_cpp(one_chain_new_cppSEXP);
    Rcpp::traits::input_parameter< double >::type logll_temper_new(logll_temper_newSEXP);
    Rcpp::traits::input_parameter< double >::type logprior_new(logprior_newSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutPre(FoutPreSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutSuf(FoutSufSEXP);
    rcpp_result_gen = Rcpp::wrap(save_log_posterior_cpp(one_chain_new_cpp, logll_temper_new, logprior_new, path, i_rank, N_parm, FoutPre, FoutSuf));
    return rcpp_result_gen;
END_RCPP
}
// save_debug_gaussian_proposal_cpp
int save_debug_gaussian_proposal_cpp(NumericVector one_chain, NumericVector sigma_prop, std::string results_dir, int N_parm);
RcppExport SEXP _cppfiles_save_debug_gaussian_proposal_cpp(SEXP one_chainSEXP, SEXP sigma_propSEXP, SEXP results_dirSEXP, SEXP N_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type one_chain(one_chainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_prop(sigma_propSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(save_debug_gaussian_proposal_cpp(one_chain, sigma_prop, results_dir, N_parm));
    return rcpp_result_gen;
END_RCPP
}
// save_debug_stack_doswap_cpp
int save_debug_stack_doswap_cpp(bool so_swap, std::string results_dir);
RcppExport SEXP _cppfiles_save_debug_stack_doswap_cpp(SEXP so_swapSEXP, SEXP results_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type so_swap(so_swapSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(save_debug_stack_doswap_cpp(so_swap, results_dir));
    return rcpp_result_gen;
END_RCPP
}
// save_debug_stack_sequence_cpp
int save_debug_stack_sequence_cpp(int i_accumul, int i_swap, std::string results_dir);
RcppExport SEXP _cppfiles_save_debug_stack_sequence_cpp(SEXP i_accumulSEXP, SEXP i_swapSEXP, SEXP results_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i_accumul(i_accumulSEXP);
    Rcpp::traits::input_parameter< int >::type i_swap(i_swapSEXP);
    Rcpp::traits::input_parameter< std::string >::type results_dir(results_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(save_debug_stack_sequence_cpp(i_accumul, i_swap, results_dir));
    return rcpp_result_gen;
END_RCPP
}
// save_tuning_sigma_ar_cpp
int save_tuning_sigma_ar_cpp(NumericMatrix ar_ParmNvaried, NumericMatrix sigma_alltune_ParmNvaried, std::string path, int rank_in_tune, int n_ranks, int N_parm);
RcppExport SEXP _cppfiles_save_tuning_sigma_ar_cpp(SEXP ar_ParmNvariedSEXP, SEXP sigma_alltune_ParmNvariedSEXP, SEXP pathSEXP, SEXP rank_in_tuneSEXP, SEXP n_ranksSEXP, SEXP N_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ar_ParmNvaried(ar_ParmNvariedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma_alltune_ParmNvaried(sigma_alltune_ParmNvariedSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type rank_in_tune(rank_in_tuneSEXP);
    Rcpp::traits::input_parameter< int >::type n_ranks(n_ranksSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(save_tuning_sigma_ar_cpp(ar_ParmNvaried, sigma_alltune_ParmNvaried, path, rank_in_tune, n_ranks, N_parm));
    return rcpp_result_gen;
END_RCPP
}
// save_the_batch_tune_cpp
int save_the_batch_tune_cpp(const std::vector<std::vector<double>>& chain_IterParm_cpp, int n_iter_a_batch, std::string path, int i_rank, int rank_in_tune, NumericVector logpost, int N_parm, std::string FoutPre, std::string FoutSuf);
RcppExport SEXP _cppfiles_save_the_batch_tune_cpp(SEXP chain_IterParm_cppSEXP, SEXP n_iter_a_batchSEXP, SEXP pathSEXP, SEXP i_rankSEXP, SEXP rank_in_tuneSEXP, SEXP logpostSEXP, SEXP N_parmSEXP, SEXP FoutPreSEXP, SEXP FoutSufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type chain_IterParm_cpp(chain_IterParm_cppSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_a_batch(n_iter_a_batchSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< int >::type rank_in_tune(rank_in_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logpost(logpostSEXP);
    Rcpp::traits::input_parameter< int >::type N_parm(N_parmSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutPre(FoutPreSEXP);
    Rcpp::traits::input_parameter< std::string >::type FoutSuf(FoutSufSEXP);
    rcpp_result_gen = Rcpp::wrap(save_the_batch_tune_cpp(chain_IterParm_cpp, n_iter_a_batch, path, i_rank, rank_in_tune, logpost, N_parm, FoutPre, FoutSuf));
    return rcpp_result_gen;
END_RCPP
}
// period_to_au_cpp
double period_to_au_cpp(double period_days, double ms_Msun);
RcppExport SEXP _cppfiles_period_to_au_cpp(SEXP period_daysSEXP, SEXP ms_MsunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type period_days(period_daysSEXP);
    Rcpp::traits::input_parameter< double >::type ms_Msun(ms_MsunSEXP);
    rcpp_result_gen = Rcpp::wrap(period_to_au_cpp(period_days, ms_Msun));
    return rcpp_result_gen;
END_RCPP
}
// calc_osi_cpp
double calc_osi_cpp(double mp_Mearth, double ms_Msun, double a_AU, double d_pc);
RcppExport SEXP _cppfiles_calc_osi_cpp(SEXP mp_MearthSEXP, SEXP ms_MsunSEXP, SEXP a_AUSEXP, SEXP d_pcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mp_Mearth(mp_MearthSEXP);
    Rcpp::traits::input_parameter< double >::type ms_Msun(ms_MsunSEXP);
    Rcpp::traits::input_parameter< double >::type a_AU(a_AUSEXP);
    Rcpp::traits::input_parameter< double >::type d_pc(d_pcSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_osi_cpp(mp_Mearth, ms_Msun, a_AU, d_pc));
    return rcpp_result_gen;
END_RCPP
}
// newton_solver_cpp
double newton_solver_cpp(double EE_init, double e);
RcppExport SEXP _cppfiles_newton_solver_cpp(SEXP EE_initSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type EE_init(EE_initSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(newton_solver_cpp(EE_init, e));
    return rcpp_result_gen;
END_RCPP
}
// func_as_cpp
std::vector<std::vector<double>> func_as_cpp(const std::vector<double>& time_con, int Nline_time, double ecc, double osi, double cosi, double OmegaO, double M0, double omega, double per, std::vector<std::vector<double>>& Ntime_radec);
RcppExport SEXP _cppfiles_func_as_cpp(SEXP time_conSEXP, SEXP Nline_timeSEXP, SEXP eccSEXP, SEXP osiSEXP, SEXP cosiSEXP, SEXP OmegaOSEXP, SEXP M0SEXP, SEXP omegaSEXP, SEXP perSEXP, SEXP Ntime_radecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_con(time_conSEXP);
    Rcpp::traits::input_parameter< int >::type Nline_time(Nline_timeSEXP);
    Rcpp::traits::input_parameter< double >::type ecc(eccSEXP);
    Rcpp::traits::input_parameter< double >::type osi(osiSEXP);
    Rcpp::traits::input_parameter< double >::type cosi(cosiSEXP);
    Rcpp::traits::input_parameter< double >::type OmegaO(OmegaOSEXP);
    Rcpp::traits::input_parameter< double >::type M0(M0SEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type per(perSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type Ntime_radec(Ntime_radecSEXP);
    rcpp_result_gen = Rcpp::wrap(func_as_cpp(time_con, Nline_time, ecc, osi, cosi, OmegaO, M0, omega, per, Ntime_radec));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_cpp
double log_likelihood_cpp(int Nline_time, const std::vector<std::vector<double>>& Ntime_radec, const std::vector<std::vector<double>>& data_radec, double var_uk);
RcppExport SEXP _cppfiles_log_likelihood_cpp(SEXP Nline_timeSEXP, SEXP Ntime_radecSEXP, SEXP data_radecSEXP, SEXP var_ukSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Nline_time(Nline_timeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type Ntime_radec(Ntime_radecSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data_radec(data_radecSEXP);
    Rcpp::traits::input_parameter< double >::type var_uk(var_ukSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_cpp(Nline_time, Ntime_radec, data_radec, var_uk));
    return rcpp_result_gen;
END_RCPP
}
// logll_beta_cpp
double logll_beta_cpp(const std::vector<double>& ptr_one_chain_cpp, int nline_data, const std::vector<std::vector<double>>& data_cpp, int i_rank, const std::vector<double>& beta_values_cpp);
RcppExport SEXP _cppfiles_logll_beta_cpp(SEXP ptr_one_chain_cppSEXP, SEXP nline_dataSEXP, SEXP data_cppSEXP, SEXP i_rankSEXP, SEXP beta_values_cppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ptr_one_chain_cpp(ptr_one_chain_cppSEXP);
    Rcpp::traits::input_parameter< int >::type nline_data(nline_dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data_cpp(data_cppSEXP);
    Rcpp::traits::input_parameter< int >::type i_rank(i_rankSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_values_cpp(beta_values_cppSEXP);
    rcpp_result_gen = Rcpp::wrap(logll_beta_cpp(ptr_one_chain_cpp, nline_data, data_cpp, i_rank, beta_values_cpp));
    return rcpp_result_gen;
END_RCPP
}
// init_gaussian_proposal_cpp
NumericVector init_gaussian_proposal_cpp(const Rcpp::NumericVector& para_min, const Rcpp::NumericVector& para_max, double init_gp_ratio);
RcppExport SEXP _cppfiles_init_gaussian_proposal_cpp(SEXP para_minSEXP, SEXP para_maxSEXP, SEXP init_gp_ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type para_min(para_minSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type para_max(para_maxSEXP);
    Rcpp::traits::input_parameter< double >::type init_gp_ratio(init_gp_ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(init_gaussian_proposal_cpp(para_min, para_max, init_gp_ratio));
    return rcpp_result_gen;
END_RCPP
}
// bounce_inside_cpp
double bounce_inside_cpp(double para, double para_min, double para_max);
RcppExport SEXP _cppfiles_bounce_inside_cpp(SEXP paraSEXP, SEXP para_minSEXP, SEXP para_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type para_min(para_minSEXP);
    Rcpp::traits::input_parameter< double >::type para_max(para_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(bounce_inside_cpp(para, para_min, para_max));
    return rcpp_result_gen;
END_RCPP
}
// para_boundary_cpp
std::vector<double> para_boundary_cpp(std::vector<double> one_chain_new_cpp, const std::vector<double>& para_min_cpp, const std::vector<double>& para_max_cpp);
RcppExport SEXP _cppfiles_para_boundary_cpp(SEXP one_chain_new_cppSEXP, SEXP para_min_cppSEXP, SEXP para_max_cppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type one_chain_new_cpp(one_chain_new_cppSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type para_min_cpp(para_min_cppSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type para_max_cpp(para_max_cppSEXP);
    rcpp_result_gen = Rcpp::wrap(para_boundary_cpp(one_chain_new_cpp, para_min_cpp, para_max_cpp));
    return rcpp_result_gen;
END_RCPP
}
// prior_para0_cpp
double prior_para0_cpp(double para0_min, double para0_max);
RcppExport SEXP _cppfiles_prior_para0_cpp(SEXP para0_minSEXP, SEXP para0_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para0_min(para0_minSEXP);
    Rcpp::traits::input_parameter< double >::type para0_max(para0_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para0_cpp(para0_min, para0_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para1_cpp
double prior_para1_cpp(double para1_min, double para1_max);
RcppExport SEXP _cppfiles_prior_para1_cpp(SEXP para1_minSEXP, SEXP para1_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para1_min(para1_minSEXP);
    Rcpp::traits::input_parameter< double >::type para1_max(para1_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para1_cpp(para1_min, para1_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para2_cpp
double prior_para2_cpp(double para2_min, double para2_max);
RcppExport SEXP _cppfiles_prior_para2_cpp(SEXP para2_minSEXP, SEXP para2_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para2_min(para2_minSEXP);
    Rcpp::traits::input_parameter< double >::type para2_max(para2_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para2_cpp(para2_min, para2_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para3_cpp
double prior_para3_cpp(double para3_min, double para3_max);
RcppExport SEXP _cppfiles_prior_para3_cpp(SEXP para3_minSEXP, SEXP para3_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para3_min(para3_minSEXP);
    Rcpp::traits::input_parameter< double >::type para3_max(para3_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para3_cpp(para3_min, para3_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para4_cpp
double prior_para4_cpp(double para4_min, double para4_max);
RcppExport SEXP _cppfiles_prior_para4_cpp(SEXP para4_minSEXP, SEXP para4_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para4_min(para4_minSEXP);
    Rcpp::traits::input_parameter< double >::type para4_max(para4_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para4_cpp(para4_min, para4_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para5_cpp
double prior_para5_cpp(double para5, double para5_min, double para5_max);
RcppExport SEXP _cppfiles_prior_para5_cpp(SEXP para5SEXP, SEXP para5_minSEXP, SEXP para5_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para5(para5SEXP);
    Rcpp::traits::input_parameter< double >::type para5_min(para5_minSEXP);
    Rcpp::traits::input_parameter< double >::type para5_max(para5_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para5_cpp(para5, para5_min, para5_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para6_cpp
double prior_para6_cpp(double para6, double para6_min, double para6_max);
RcppExport SEXP _cppfiles_prior_para6_cpp(SEXP para6SEXP, SEXP para6_minSEXP, SEXP para6_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para6(para6SEXP);
    Rcpp::traits::input_parameter< double >::type para6_min(para6_minSEXP);
    Rcpp::traits::input_parameter< double >::type para6_max(para6_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para6_cpp(para6, para6_min, para6_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para7_cpp
double prior_para7_cpp(double para7, double para7_min, double para7_max);
RcppExport SEXP _cppfiles_prior_para7_cpp(SEXP para7SEXP, SEXP para7_minSEXP, SEXP para7_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para7(para7SEXP);
    Rcpp::traits::input_parameter< double >::type para7_min(para7_minSEXP);
    Rcpp::traits::input_parameter< double >::type para7_max(para7_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para7_cpp(para7, para7_min, para7_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para8_cpp
double prior_para8_cpp(double para8_min, double para8_max);
RcppExport SEXP _cppfiles_prior_para8_cpp(SEXP para8_minSEXP, SEXP para8_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para8_min(para8_minSEXP);
    Rcpp::traits::input_parameter< double >::type para8_max(para8_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para8_cpp(para8_min, para8_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para9_cpp
double prior_para9_cpp(double para9_min, double para9_max);
RcppExport SEXP _cppfiles_prior_para9_cpp(SEXP para9_minSEXP, SEXP para9_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para9_min(para9_minSEXP);
    Rcpp::traits::input_parameter< double >::type para9_max(para9_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para9_cpp(para9_min, para9_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para10_cpp
double prior_para10_cpp(double para10_min, double para10_max);
RcppExport SEXP _cppfiles_prior_para10_cpp(SEXP para10_minSEXP, SEXP para10_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para10_min(para10_minSEXP);
    Rcpp::traits::input_parameter< double >::type para10_max(para10_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para10_cpp(para10_min, para10_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para11_cpp
double prior_para11_cpp(double para11_min, double para11_max);
RcppExport SEXP _cppfiles_prior_para11_cpp(SEXP para11_minSEXP, SEXP para11_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para11_min(para11_minSEXP);
    Rcpp::traits::input_parameter< double >::type para11_max(para11_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para11_cpp(para11_min, para11_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para12_cpp
double prior_para12_cpp(double para12_min, double para12_max);
RcppExport SEXP _cppfiles_prior_para12_cpp(SEXP para12_minSEXP, SEXP para12_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para12_min(para12_minSEXP);
    Rcpp::traits::input_parameter< double >::type para12_max(para12_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para12_cpp(para12_min, para12_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para13_cpp
double prior_para13_cpp(double para13, double para13_min, double para13_max);
RcppExport SEXP _cppfiles_prior_para13_cpp(SEXP para13SEXP, SEXP para13_minSEXP, SEXP para13_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para13(para13SEXP);
    Rcpp::traits::input_parameter< double >::type para13_min(para13_minSEXP);
    Rcpp::traits::input_parameter< double >::type para13_max(para13_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para13_cpp(para13, para13_min, para13_max));
    return rcpp_result_gen;
END_RCPP
}
// prior_para14_cpp
double prior_para14_cpp(double para14, double para14_min, double para14_max);
RcppExport SEXP _cppfiles_prior_para14_cpp(SEXP para14SEXP, SEXP para14_minSEXP, SEXP para14_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type para14(para14SEXP);
    Rcpp::traits::input_parameter< double >::type para14_min(para14_minSEXP);
    Rcpp::traits::input_parameter< double >::type para14_max(para14_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_para14_cpp(para14, para14_min, para14_max));
    return rcpp_result_gen;
END_RCPP
}
// log_prior_cpp
double log_prior_cpp(const std::vector<double>& ptr_one_chain_cpp, const std::vector<double>& para_min_cpp, const std::vector<double>& para_max_cpp);
RcppExport SEXP _cppfiles_log_prior_cpp(SEXP ptr_one_chain_cppSEXP, SEXP para_min_cppSEXP, SEXP para_max_cppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ptr_one_chain_cpp(ptr_one_chain_cppSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type para_min_cpp(para_min_cppSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type para_max_cpp(para_max_cppSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_cpp(ptr_one_chain_cpp, para_min_cpp, para_max_cpp));
    return rcpp_result_gen;
END_RCPP
}
// save_debug_para_boundary_cpp
void save_debug_para_boundary_cpp(const std::string& p_s, double p, double p_min, double p_max, const std::string& result_dir);
RcppExport SEXP _cppfiles_save_debug_para_boundary_cpp(SEXP p_sSEXP, SEXP pSEXP, SEXP p_minSEXP, SEXP p_maxSEXP, SEXP result_dirSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type p_s(p_sSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type p_min(p_minSEXP);
    Rcpp::traits::input_parameter< double >::type p_max(p_maxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type result_dir(result_dirSEXP);
    save_debug_para_boundary_cpp(p_s, p, p_min, p_max, result_dir);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppfiles_run_mcmc_cpp", (DL_FUNC) &_cppfiles_run_mcmc_cpp, 30},
    {"_cppfiles_r8_normal_01", (DL_FUNC) &_cppfiles_r8_normal_01, 0},
    {"_cppfiles_r8_normal_ab", (DL_FUNC) &_cppfiles_r8_normal_ab, 2},
    {"_cppfiles_r8_logunif_ab", (DL_FUNC) &_cppfiles_r8_logunif_ab, 2},
    {"_cppfiles_r8_unif_ab", (DL_FUNC) &_cppfiles_r8_unif_ab, 2},
    {"_cppfiles_i4_unif_ab", (DL_FUNC) &_cppfiles_i4_unif_ab, 2},
    {"_cppfiles_i4_unif_0a", (DL_FUNC) &_cppfiles_i4_unif_0a, 1},
    {"_cppfiles_normal_pdf", (DL_FUNC) &_cppfiles_normal_pdf, 3},
    {"_cppfiles_save_first_chain_cpp", (DL_FUNC) &_cppfiles_save_first_chain_cpp, 7},
    {"_cppfiles_save_init_parm_cpp", (DL_FUNC) &_cppfiles_save_init_parm_cpp, 4},
    {"_cppfiles_save_the_seed_cpp", (DL_FUNC) &_cppfiles_save_the_seed_cpp, 3},
    {"_cppfiles_save_sigma_gauss_prop_cpp", (DL_FUNC) &_cppfiles_save_sigma_gauss_prop_cpp, 4},
    {"_cppfiles_save_ar_stack_cpp", (DL_FUNC) &_cppfiles_save_ar_stack_cpp, 5},
    {"_cppfiles_save_the_batch_cpp", (DL_FUNC) &_cppfiles_save_the_batch_cpp, 10},
    {"_cppfiles_save_log_posterior_cpp", (DL_FUNC) &_cppfiles_save_log_posterior_cpp, 8},
    {"_cppfiles_save_debug_gaussian_proposal_cpp", (DL_FUNC) &_cppfiles_save_debug_gaussian_proposal_cpp, 4},
    {"_cppfiles_save_debug_stack_doswap_cpp", (DL_FUNC) &_cppfiles_save_debug_stack_doswap_cpp, 2},
    {"_cppfiles_save_debug_stack_sequence_cpp", (DL_FUNC) &_cppfiles_save_debug_stack_sequence_cpp, 3},
    {"_cppfiles_save_tuning_sigma_ar_cpp", (DL_FUNC) &_cppfiles_save_tuning_sigma_ar_cpp, 6},
    {"_cppfiles_save_the_batch_tune_cpp", (DL_FUNC) &_cppfiles_save_the_batch_tune_cpp, 9},
    {"_cppfiles_period_to_au_cpp", (DL_FUNC) &_cppfiles_period_to_au_cpp, 2},
    {"_cppfiles_calc_osi_cpp", (DL_FUNC) &_cppfiles_calc_osi_cpp, 4},
    {"_cppfiles_newton_solver_cpp", (DL_FUNC) &_cppfiles_newton_solver_cpp, 2},
    {"_cppfiles_func_as_cpp", (DL_FUNC) &_cppfiles_func_as_cpp, 10},
    {"_cppfiles_log_likelihood_cpp", (DL_FUNC) &_cppfiles_log_likelihood_cpp, 4},
    {"_cppfiles_logll_beta_cpp", (DL_FUNC) &_cppfiles_logll_beta_cpp, 5},
    {"_cppfiles_init_gaussian_proposal_cpp", (DL_FUNC) &_cppfiles_init_gaussian_proposal_cpp, 3},
    {"_cppfiles_bounce_inside_cpp", (DL_FUNC) &_cppfiles_bounce_inside_cpp, 3},
    {"_cppfiles_para_boundary_cpp", (DL_FUNC) &_cppfiles_para_boundary_cpp, 3},
    {"_cppfiles_prior_para0_cpp", (DL_FUNC) &_cppfiles_prior_para0_cpp, 2},
    {"_cppfiles_prior_para1_cpp", (DL_FUNC) &_cppfiles_prior_para1_cpp, 2},
    {"_cppfiles_prior_para2_cpp", (DL_FUNC) &_cppfiles_prior_para2_cpp, 2},
    {"_cppfiles_prior_para3_cpp", (DL_FUNC) &_cppfiles_prior_para3_cpp, 2},
    {"_cppfiles_prior_para4_cpp", (DL_FUNC) &_cppfiles_prior_para4_cpp, 2},
    {"_cppfiles_prior_para5_cpp", (DL_FUNC) &_cppfiles_prior_para5_cpp, 3},
    {"_cppfiles_prior_para6_cpp", (DL_FUNC) &_cppfiles_prior_para6_cpp, 3},
    {"_cppfiles_prior_para7_cpp", (DL_FUNC) &_cppfiles_prior_para7_cpp, 3},
    {"_cppfiles_prior_para8_cpp", (DL_FUNC) &_cppfiles_prior_para8_cpp, 2},
    {"_cppfiles_prior_para9_cpp", (DL_FUNC) &_cppfiles_prior_para9_cpp, 2},
    {"_cppfiles_prior_para10_cpp", (DL_FUNC) &_cppfiles_prior_para10_cpp, 2},
    {"_cppfiles_prior_para11_cpp", (DL_FUNC) &_cppfiles_prior_para11_cpp, 2},
    {"_cppfiles_prior_para12_cpp", (DL_FUNC) &_cppfiles_prior_para12_cpp, 2},
    {"_cppfiles_prior_para13_cpp", (DL_FUNC) &_cppfiles_prior_para13_cpp, 3},
    {"_cppfiles_prior_para14_cpp", (DL_FUNC) &_cppfiles_prior_para14_cpp, 3},
    {"_cppfiles_log_prior_cpp", (DL_FUNC) &_cppfiles_log_prior_cpp, 3},
    {"_cppfiles_save_debug_para_boundary_cpp", (DL_FUNC) &_cppfiles_save_debug_para_boundary_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppfiles(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
